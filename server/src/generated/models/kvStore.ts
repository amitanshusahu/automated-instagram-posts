
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `kvStore` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model kvStore
 * 
 */
export type kvStoreModel = runtime.Types.Result.DefaultSelection<Prisma.$kvStorePayload>

export type AggregateKvStore = {
  _count: KvStoreCountAggregateOutputType | null
  _min: KvStoreMinAggregateOutputType | null
  _max: KvStoreMaxAggregateOutputType | null
}

export type KvStoreMinAggregateOutputType = {
  key: string | null
  value: string | null
}

export type KvStoreMaxAggregateOutputType = {
  key: string | null
  value: string | null
}

export type KvStoreCountAggregateOutputType = {
  key: number
  value: number
  _all: number
}


export type KvStoreMinAggregateInputType = {
  key?: true
  value?: true
}

export type KvStoreMaxAggregateInputType = {
  key?: true
  value?: true
}

export type KvStoreCountAggregateInputType = {
  key?: true
  value?: true
  _all?: true
}

export type KvStoreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which kvStore to aggregate.
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of kvStores to fetch.
   */
  orderBy?: Prisma.kvStoreOrderByWithRelationInput | Prisma.kvStoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.kvStoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` kvStores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` kvStores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned kvStores
  **/
  _count?: true | KvStoreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KvStoreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KvStoreMaxAggregateInputType
}

export type GetKvStoreAggregateType<T extends KvStoreAggregateArgs> = {
      [P in keyof T & keyof AggregateKvStore]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKvStore[P]>
    : Prisma.GetScalarType<T[P], AggregateKvStore[P]>
}




export type kvStoreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.kvStoreWhereInput
  orderBy?: Prisma.kvStoreOrderByWithAggregationInput | Prisma.kvStoreOrderByWithAggregationInput[]
  by: Prisma.KvStoreScalarFieldEnum[] | Prisma.KvStoreScalarFieldEnum
  having?: Prisma.kvStoreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KvStoreCountAggregateInputType | true
  _min?: KvStoreMinAggregateInputType
  _max?: KvStoreMaxAggregateInputType
}

export type KvStoreGroupByOutputType = {
  key: string
  value: string
  _count: KvStoreCountAggregateOutputType | null
  _min: KvStoreMinAggregateOutputType | null
  _max: KvStoreMaxAggregateOutputType | null
}

type GetKvStoreGroupByPayload<T extends kvStoreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KvStoreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KvStoreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KvStoreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KvStoreGroupByOutputType[P]>
      }
    >
  >



export type kvStoreWhereInput = {
  AND?: Prisma.kvStoreWhereInput | Prisma.kvStoreWhereInput[]
  OR?: Prisma.kvStoreWhereInput[]
  NOT?: Prisma.kvStoreWhereInput | Prisma.kvStoreWhereInput[]
  key?: Prisma.StringFilter<"kvStore"> | string
  value?: Prisma.StringFilter<"kvStore"> | string
}

export type kvStoreOrderByWithRelationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type kvStoreWhereUniqueInput = Prisma.AtLeast<{
  key?: string
  AND?: Prisma.kvStoreWhereInput | Prisma.kvStoreWhereInput[]
  OR?: Prisma.kvStoreWhereInput[]
  NOT?: Prisma.kvStoreWhereInput | Prisma.kvStoreWhereInput[]
  value?: Prisma.StringFilter<"kvStore"> | string
}, "key">

export type kvStoreOrderByWithAggregationInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  _count?: Prisma.kvStoreCountOrderByAggregateInput
  _max?: Prisma.kvStoreMaxOrderByAggregateInput
  _min?: Prisma.kvStoreMinOrderByAggregateInput
}

export type kvStoreScalarWhereWithAggregatesInput = {
  AND?: Prisma.kvStoreScalarWhereWithAggregatesInput | Prisma.kvStoreScalarWhereWithAggregatesInput[]
  OR?: Prisma.kvStoreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.kvStoreScalarWhereWithAggregatesInput | Prisma.kvStoreScalarWhereWithAggregatesInput[]
  key?: Prisma.StringWithAggregatesFilter<"kvStore"> | string
  value?: Prisma.StringWithAggregatesFilter<"kvStore"> | string
}

export type kvStoreCreateInput = {
  key: string
  value: string
}

export type kvStoreUncheckedCreateInput = {
  key: string
  value: string
}

export type kvStoreUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type kvStoreUncheckedUpdateInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type kvStoreCreateManyInput = {
  key: string
  value: string
}

export type kvStoreUpdateManyMutationInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type kvStoreUncheckedUpdateManyInput = {
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
}

export type kvStoreCountOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type kvStoreMaxOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type kvStoreMinOrderByAggregateInput = {
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type kvStoreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["kvStore"]>

export type kvStoreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["kvStore"]>

export type kvStoreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  key?: boolean
  value?: boolean
}, ExtArgs["result"]["kvStore"]>

export type kvStoreSelectScalar = {
  key?: boolean
  value?: boolean
}

export type kvStoreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"key" | "value", ExtArgs["result"]["kvStore"]>

export type $kvStorePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "kvStore"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    key: string
    value: string
  }, ExtArgs["result"]["kvStore"]>
  composites: {}
}

export type kvStoreGetPayload<S extends boolean | null | undefined | kvStoreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$kvStorePayload, S>

export type kvStoreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<kvStoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KvStoreCountAggregateInputType | true
  }

export interface kvStoreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['kvStore'], meta: { name: 'kvStore' } }
  /**
   * Find zero or one KvStore that matches the filter.
   * @param {kvStoreFindUniqueArgs} args - Arguments to find a KvStore
   * @example
   * // Get one KvStore
   * const kvStore = await prisma.kvStore.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends kvStoreFindUniqueArgs>(args: Prisma.SelectSubset<T, kvStoreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one KvStore that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {kvStoreFindUniqueOrThrowArgs} args - Arguments to find a KvStore
   * @example
   * // Get one KvStore
   * const kvStore = await prisma.kvStore.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends kvStoreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, kvStoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KvStore that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreFindFirstArgs} args - Arguments to find a KvStore
   * @example
   * // Get one KvStore
   * const kvStore = await prisma.kvStore.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends kvStoreFindFirstArgs>(args?: Prisma.SelectSubset<T, kvStoreFindFirstArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KvStore that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreFindFirstOrThrowArgs} args - Arguments to find a KvStore
   * @example
   * // Get one KvStore
   * const kvStore = await prisma.kvStore.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends kvStoreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, kvStoreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more KvStores that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all KvStores
   * const kvStores = await prisma.kvStore.findMany()
   * 
   * // Get first 10 KvStores
   * const kvStores = await prisma.kvStore.findMany({ take: 10 })
   * 
   * // Only select the `key`
   * const kvStoreWithKeyOnly = await prisma.kvStore.findMany({ select: { key: true } })
   * 
   */
  findMany<T extends kvStoreFindManyArgs>(args?: Prisma.SelectSubset<T, kvStoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a KvStore.
   * @param {kvStoreCreateArgs} args - Arguments to create a KvStore.
   * @example
   * // Create one KvStore
   * const KvStore = await prisma.kvStore.create({
   *   data: {
   *     // ... data to create a KvStore
   *   }
   * })
   * 
   */
  create<T extends kvStoreCreateArgs>(args: Prisma.SelectSubset<T, kvStoreCreateArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many KvStores.
   * @param {kvStoreCreateManyArgs} args - Arguments to create many KvStores.
   * @example
   * // Create many KvStores
   * const kvStore = await prisma.kvStore.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends kvStoreCreateManyArgs>(args?: Prisma.SelectSubset<T, kvStoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many KvStores and returns the data saved in the database.
   * @param {kvStoreCreateManyAndReturnArgs} args - Arguments to create many KvStores.
   * @example
   * // Create many KvStores
   * const kvStore = await prisma.kvStore.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many KvStores and only return the `key`
   * const kvStoreWithKeyOnly = await prisma.kvStore.createManyAndReturn({
   *   select: { key: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends kvStoreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, kvStoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a KvStore.
   * @param {kvStoreDeleteArgs} args - Arguments to delete one KvStore.
   * @example
   * // Delete one KvStore
   * const KvStore = await prisma.kvStore.delete({
   *   where: {
   *     // ... filter to delete one KvStore
   *   }
   * })
   * 
   */
  delete<T extends kvStoreDeleteArgs>(args: Prisma.SelectSubset<T, kvStoreDeleteArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one KvStore.
   * @param {kvStoreUpdateArgs} args - Arguments to update one KvStore.
   * @example
   * // Update one KvStore
   * const kvStore = await prisma.kvStore.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends kvStoreUpdateArgs>(args: Prisma.SelectSubset<T, kvStoreUpdateArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more KvStores.
   * @param {kvStoreDeleteManyArgs} args - Arguments to filter KvStores to delete.
   * @example
   * // Delete a few KvStores
   * const { count } = await prisma.kvStore.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends kvStoreDeleteManyArgs>(args?: Prisma.SelectSubset<T, kvStoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KvStores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many KvStores
   * const kvStore = await prisma.kvStore.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends kvStoreUpdateManyArgs>(args: Prisma.SelectSubset<T, kvStoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KvStores and returns the data updated in the database.
   * @param {kvStoreUpdateManyAndReturnArgs} args - Arguments to update many KvStores.
   * @example
   * // Update many KvStores
   * const kvStore = await prisma.kvStore.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more KvStores and only return the `key`
   * const kvStoreWithKeyOnly = await prisma.kvStore.updateManyAndReturn({
   *   select: { key: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends kvStoreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, kvStoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one KvStore.
   * @param {kvStoreUpsertArgs} args - Arguments to update or create a KvStore.
   * @example
   * // Update or create a KvStore
   * const kvStore = await prisma.kvStore.upsert({
   *   create: {
   *     // ... data to create a KvStore
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the KvStore we want to update
   *   }
   * })
   */
  upsert<T extends kvStoreUpsertArgs>(args: Prisma.SelectSubset<T, kvStoreUpsertArgs<ExtArgs>>): Prisma.Prisma__kvStoreClient<runtime.Types.Result.GetResult<Prisma.$kvStorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of KvStores.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreCountArgs} args - Arguments to filter KvStores to count.
   * @example
   * // Count the number of KvStores
   * const count = await prisma.kvStore.count({
   *   where: {
   *     // ... the filter for the KvStores we want to count
   *   }
   * })
  **/
  count<T extends kvStoreCountArgs>(
    args?: Prisma.Subset<T, kvStoreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KvStoreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a KvStore.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KvStoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KvStoreAggregateArgs>(args: Prisma.Subset<T, KvStoreAggregateArgs>): Prisma.PrismaPromise<GetKvStoreAggregateType<T>>

  /**
   * Group by KvStore.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {kvStoreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends kvStoreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: kvStoreGroupByArgs['orderBy'] }
      : { orderBy?: kvStoreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, kvStoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKvStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the kvStore model
 */
readonly fields: kvStoreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for kvStore.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__kvStoreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the kvStore model
 */
export interface kvStoreFieldRefs {
  readonly key: Prisma.FieldRef<"kvStore", 'String'>
  readonly value: Prisma.FieldRef<"kvStore", 'String'>
}
    

// Custom InputTypes
/**
 * kvStore findUnique
 */
export type kvStoreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter, which kvStore to fetch.
   */
  where: Prisma.kvStoreWhereUniqueInput
}

/**
 * kvStore findUniqueOrThrow
 */
export type kvStoreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter, which kvStore to fetch.
   */
  where: Prisma.kvStoreWhereUniqueInput
}

/**
 * kvStore findFirst
 */
export type kvStoreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter, which kvStore to fetch.
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of kvStores to fetch.
   */
  orderBy?: Prisma.kvStoreOrderByWithRelationInput | Prisma.kvStoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for kvStores.
   */
  cursor?: Prisma.kvStoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` kvStores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` kvStores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of kvStores.
   */
  distinct?: Prisma.KvStoreScalarFieldEnum | Prisma.KvStoreScalarFieldEnum[]
}

/**
 * kvStore findFirstOrThrow
 */
export type kvStoreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter, which kvStore to fetch.
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of kvStores to fetch.
   */
  orderBy?: Prisma.kvStoreOrderByWithRelationInput | Prisma.kvStoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for kvStores.
   */
  cursor?: Prisma.kvStoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` kvStores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` kvStores.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of kvStores.
   */
  distinct?: Prisma.KvStoreScalarFieldEnum | Prisma.KvStoreScalarFieldEnum[]
}

/**
 * kvStore findMany
 */
export type kvStoreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter, which kvStores to fetch.
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of kvStores to fetch.
   */
  orderBy?: Prisma.kvStoreOrderByWithRelationInput | Prisma.kvStoreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing kvStores.
   */
  cursor?: Prisma.kvStoreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` kvStores from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` kvStores.
   */
  skip?: number
  distinct?: Prisma.KvStoreScalarFieldEnum | Prisma.KvStoreScalarFieldEnum[]
}

/**
 * kvStore create
 */
export type kvStoreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * The data needed to create a kvStore.
   */
  data: Prisma.XOR<Prisma.kvStoreCreateInput, Prisma.kvStoreUncheckedCreateInput>
}

/**
 * kvStore createMany
 */
export type kvStoreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many kvStores.
   */
  data: Prisma.kvStoreCreateManyInput | Prisma.kvStoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * kvStore createManyAndReturn
 */
export type kvStoreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * The data used to create many kvStores.
   */
  data: Prisma.kvStoreCreateManyInput | Prisma.kvStoreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * kvStore update
 */
export type kvStoreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * The data needed to update a kvStore.
   */
  data: Prisma.XOR<Prisma.kvStoreUpdateInput, Prisma.kvStoreUncheckedUpdateInput>
  /**
   * Choose, which kvStore to update.
   */
  where: Prisma.kvStoreWhereUniqueInput
}

/**
 * kvStore updateMany
 */
export type kvStoreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update kvStores.
   */
  data: Prisma.XOR<Prisma.kvStoreUpdateManyMutationInput, Prisma.kvStoreUncheckedUpdateManyInput>
  /**
   * Filter which kvStores to update
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * Limit how many kvStores to update.
   */
  limit?: number
}

/**
 * kvStore updateManyAndReturn
 */
export type kvStoreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * The data used to update kvStores.
   */
  data: Prisma.XOR<Prisma.kvStoreUpdateManyMutationInput, Prisma.kvStoreUncheckedUpdateManyInput>
  /**
   * Filter which kvStores to update
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * Limit how many kvStores to update.
   */
  limit?: number
}

/**
 * kvStore upsert
 */
export type kvStoreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * The filter to search for the kvStore to update in case it exists.
   */
  where: Prisma.kvStoreWhereUniqueInput
  /**
   * In case the kvStore found by the `where` argument doesn't exist, create a new kvStore with this data.
   */
  create: Prisma.XOR<Prisma.kvStoreCreateInput, Prisma.kvStoreUncheckedCreateInput>
  /**
   * In case the kvStore was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.kvStoreUpdateInput, Prisma.kvStoreUncheckedUpdateInput>
}

/**
 * kvStore delete
 */
export type kvStoreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
  /**
   * Filter which kvStore to delete.
   */
  where: Prisma.kvStoreWhereUniqueInput
}

/**
 * kvStore deleteMany
 */
export type kvStoreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which kvStores to delete
   */
  where?: Prisma.kvStoreWhereInput
  /**
   * Limit how many kvStores to delete.
   */
  limit?: number
}

/**
 * kvStore without action
 */
export type kvStoreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the kvStore
   */
  select?: Prisma.kvStoreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the kvStore
   */
  omit?: Prisma.kvStoreOmit<ExtArgs> | null
}
