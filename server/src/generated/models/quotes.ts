
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `quotes` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model quotes
 * 
 */
export type quotesModel = runtime.Types.Result.DefaultSelection<Prisma.$quotesPayload>

export type AggregateQuotes = {
  _count: QuotesCountAggregateOutputType | null
  _avg: QuotesAvgAggregateOutputType | null
  _sum: QuotesSumAggregateOutputType | null
  _min: QuotesMinAggregateOutputType | null
  _max: QuotesMaxAggregateOutputType | null
}

export type QuotesAvgAggregateOutputType = {
  id: number | null
}

export type QuotesSumAggregateOutputType = {
  id: number | null
}

export type QuotesMinAggregateOutputType = {
  id: number | null
  quote: string | null
  isPosted: boolean | null
  createdAt: Date | null
}

export type QuotesMaxAggregateOutputType = {
  id: number | null
  quote: string | null
  isPosted: boolean | null
  createdAt: Date | null
}

export type QuotesCountAggregateOutputType = {
  id: number
  quote: number
  isPosted: number
  createdAt: number
  _all: number
}


export type QuotesAvgAggregateInputType = {
  id?: true
}

export type QuotesSumAggregateInputType = {
  id?: true
}

export type QuotesMinAggregateInputType = {
  id?: true
  quote?: true
  isPosted?: true
  createdAt?: true
}

export type QuotesMaxAggregateInputType = {
  id?: true
  quote?: true
  isPosted?: true
  createdAt?: true
}

export type QuotesCountAggregateInputType = {
  id?: true
  quote?: true
  isPosted?: true
  createdAt?: true
  _all?: true
}

export type QuotesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which quotes to aggregate.
   */
  where?: Prisma.quotesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of quotes to fetch.
   */
  orderBy?: Prisma.quotesOrderByWithRelationInput | Prisma.quotesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.quotesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` quotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` quotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned quotes
  **/
  _count?: true | QuotesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: QuotesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: QuotesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuotesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuotesMaxAggregateInputType
}

export type GetQuotesAggregateType<T extends QuotesAggregateArgs> = {
      [P in keyof T & keyof AggregateQuotes]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuotes[P]>
    : Prisma.GetScalarType<T[P], AggregateQuotes[P]>
}




export type quotesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.quotesWhereInput
  orderBy?: Prisma.quotesOrderByWithAggregationInput | Prisma.quotesOrderByWithAggregationInput[]
  by: Prisma.QuotesScalarFieldEnum[] | Prisma.QuotesScalarFieldEnum
  having?: Prisma.quotesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuotesCountAggregateInputType | true
  _avg?: QuotesAvgAggregateInputType
  _sum?: QuotesSumAggregateInputType
  _min?: QuotesMinAggregateInputType
  _max?: QuotesMaxAggregateInputType
}

export type QuotesGroupByOutputType = {
  id: number
  quote: string
  isPosted: boolean
  createdAt: Date
  _count: QuotesCountAggregateOutputType | null
  _avg: QuotesAvgAggregateOutputType | null
  _sum: QuotesSumAggregateOutputType | null
  _min: QuotesMinAggregateOutputType | null
  _max: QuotesMaxAggregateOutputType | null
}

type GetQuotesGroupByPayload<T extends quotesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuotesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuotesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuotesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuotesGroupByOutputType[P]>
      }
    >
  >



export type quotesWhereInput = {
  AND?: Prisma.quotesWhereInput | Prisma.quotesWhereInput[]
  OR?: Prisma.quotesWhereInput[]
  NOT?: Prisma.quotesWhereInput | Prisma.quotesWhereInput[]
  id?: Prisma.IntFilter<"quotes"> | number
  quote?: Prisma.StringFilter<"quotes"> | string
  isPosted?: Prisma.BoolFilter<"quotes"> | boolean
  createdAt?: Prisma.DateTimeFilter<"quotes"> | Date | string
}

export type quotesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  quote?: Prisma.SortOrder
  isPosted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type quotesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.quotesWhereInput | Prisma.quotesWhereInput[]
  OR?: Prisma.quotesWhereInput[]
  NOT?: Prisma.quotesWhereInput | Prisma.quotesWhereInput[]
  quote?: Prisma.StringFilter<"quotes"> | string
  isPosted?: Prisma.BoolFilter<"quotes"> | boolean
  createdAt?: Prisma.DateTimeFilter<"quotes"> | Date | string
}, "id">

export type quotesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  quote?: Prisma.SortOrder
  isPosted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.quotesCountOrderByAggregateInput
  _avg?: Prisma.quotesAvgOrderByAggregateInput
  _max?: Prisma.quotesMaxOrderByAggregateInput
  _min?: Prisma.quotesMinOrderByAggregateInput
  _sum?: Prisma.quotesSumOrderByAggregateInput
}

export type quotesScalarWhereWithAggregatesInput = {
  AND?: Prisma.quotesScalarWhereWithAggregatesInput | Prisma.quotesScalarWhereWithAggregatesInput[]
  OR?: Prisma.quotesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.quotesScalarWhereWithAggregatesInput | Prisma.quotesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"quotes"> | number
  quote?: Prisma.StringWithAggregatesFilter<"quotes"> | string
  isPosted?: Prisma.BoolWithAggregatesFilter<"quotes"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"quotes"> | Date | string
}

export type quotesCreateInput = {
  quote: string
  isPosted?: boolean
  createdAt?: Date | string
}

export type quotesUncheckedCreateInput = {
  id?: number
  quote: string
  isPosted?: boolean
  createdAt?: Date | string
}

export type quotesUpdateInput = {
  quote?: Prisma.StringFieldUpdateOperationsInput | string
  isPosted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type quotesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  quote?: Prisma.StringFieldUpdateOperationsInput | string
  isPosted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type quotesCreateManyInput = {
  id?: number
  quote: string
  isPosted?: boolean
  createdAt?: Date | string
}

export type quotesUpdateManyMutationInput = {
  quote?: Prisma.StringFieldUpdateOperationsInput | string
  isPosted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type quotesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  quote?: Prisma.StringFieldUpdateOperationsInput | string
  isPosted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type quotesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quote?: Prisma.SortOrder
  isPosted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type quotesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type quotesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quote?: Prisma.SortOrder
  isPosted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type quotesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quote?: Prisma.SortOrder
  isPosted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type quotesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type quotesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quote?: boolean
  isPosted?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["quotes"]>

export type quotesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quote?: boolean
  isPosted?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["quotes"]>

export type quotesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quote?: boolean
  isPosted?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["quotes"]>

export type quotesSelectScalar = {
  id?: boolean
  quote?: boolean
  isPosted?: boolean
  createdAt?: boolean
}

export type quotesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "quote" | "isPosted" | "createdAt", ExtArgs["result"]["quotes"]>

export type $quotesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "quotes"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    quote: string
    isPosted: boolean
    createdAt: Date
  }, ExtArgs["result"]["quotes"]>
  composites: {}
}

export type quotesGetPayload<S extends boolean | null | undefined | quotesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$quotesPayload, S>

export type quotesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<quotesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuotesCountAggregateInputType | true
  }

export interface quotesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['quotes'], meta: { name: 'quotes' } }
  /**
   * Find zero or one Quotes that matches the filter.
   * @param {quotesFindUniqueArgs} args - Arguments to find a Quotes
   * @example
   * // Get one Quotes
   * const quotes = await prisma.quotes.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends quotesFindUniqueArgs>(args: Prisma.SelectSubset<T, quotesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Quotes that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {quotesFindUniqueOrThrowArgs} args - Arguments to find a Quotes
   * @example
   * // Get one Quotes
   * const quotes = await prisma.quotes.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends quotesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, quotesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Quotes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesFindFirstArgs} args - Arguments to find a Quotes
   * @example
   * // Get one Quotes
   * const quotes = await prisma.quotes.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends quotesFindFirstArgs>(args?: Prisma.SelectSubset<T, quotesFindFirstArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Quotes that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesFindFirstOrThrowArgs} args - Arguments to find a Quotes
   * @example
   * // Get one Quotes
   * const quotes = await prisma.quotes.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends quotesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, quotesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Quotes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Quotes
   * const quotes = await prisma.quotes.findMany()
   * 
   * // Get first 10 Quotes
   * const quotes = await prisma.quotes.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const quotesWithIdOnly = await prisma.quotes.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends quotesFindManyArgs>(args?: Prisma.SelectSubset<T, quotesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Quotes.
   * @param {quotesCreateArgs} args - Arguments to create a Quotes.
   * @example
   * // Create one Quotes
   * const Quotes = await prisma.quotes.create({
   *   data: {
   *     // ... data to create a Quotes
   *   }
   * })
   * 
   */
  create<T extends quotesCreateArgs>(args: Prisma.SelectSubset<T, quotesCreateArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Quotes.
   * @param {quotesCreateManyArgs} args - Arguments to create many Quotes.
   * @example
   * // Create many Quotes
   * const quotes = await prisma.quotes.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends quotesCreateManyArgs>(args?: Prisma.SelectSubset<T, quotesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Quotes and returns the data saved in the database.
   * @param {quotesCreateManyAndReturnArgs} args - Arguments to create many Quotes.
   * @example
   * // Create many Quotes
   * const quotes = await prisma.quotes.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Quotes and only return the `id`
   * const quotesWithIdOnly = await prisma.quotes.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends quotesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, quotesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Quotes.
   * @param {quotesDeleteArgs} args - Arguments to delete one Quotes.
   * @example
   * // Delete one Quotes
   * const Quotes = await prisma.quotes.delete({
   *   where: {
   *     // ... filter to delete one Quotes
   *   }
   * })
   * 
   */
  delete<T extends quotesDeleteArgs>(args: Prisma.SelectSubset<T, quotesDeleteArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Quotes.
   * @param {quotesUpdateArgs} args - Arguments to update one Quotes.
   * @example
   * // Update one Quotes
   * const quotes = await prisma.quotes.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends quotesUpdateArgs>(args: Prisma.SelectSubset<T, quotesUpdateArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Quotes.
   * @param {quotesDeleteManyArgs} args - Arguments to filter Quotes to delete.
   * @example
   * // Delete a few Quotes
   * const { count } = await prisma.quotes.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends quotesDeleteManyArgs>(args?: Prisma.SelectSubset<T, quotesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Quotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Quotes
   * const quotes = await prisma.quotes.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends quotesUpdateManyArgs>(args: Prisma.SelectSubset<T, quotesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Quotes and returns the data updated in the database.
   * @param {quotesUpdateManyAndReturnArgs} args - Arguments to update many Quotes.
   * @example
   * // Update many Quotes
   * const quotes = await prisma.quotes.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Quotes and only return the `id`
   * const quotesWithIdOnly = await prisma.quotes.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends quotesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, quotesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Quotes.
   * @param {quotesUpsertArgs} args - Arguments to update or create a Quotes.
   * @example
   * // Update or create a Quotes
   * const quotes = await prisma.quotes.upsert({
   *   create: {
   *     // ... data to create a Quotes
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Quotes we want to update
   *   }
   * })
   */
  upsert<T extends quotesUpsertArgs>(args: Prisma.SelectSubset<T, quotesUpsertArgs<ExtArgs>>): Prisma.Prisma__quotesClient<runtime.Types.Result.GetResult<Prisma.$quotesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Quotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesCountArgs} args - Arguments to filter Quotes to count.
   * @example
   * // Count the number of Quotes
   * const count = await prisma.quotes.count({
   *   where: {
   *     // ... the filter for the Quotes we want to count
   *   }
   * })
  **/
  count<T extends quotesCountArgs>(
    args?: Prisma.Subset<T, quotesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuotesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Quotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuotesAggregateArgs>(args: Prisma.Subset<T, QuotesAggregateArgs>): Prisma.PrismaPromise<GetQuotesAggregateType<T>>

  /**
   * Group by Quotes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {quotesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends quotesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: quotesGroupByArgs['orderBy'] }
      : { orderBy?: quotesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, quotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the quotes model
 */
readonly fields: quotesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for quotes.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__quotesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the quotes model
 */
export interface quotesFieldRefs {
  readonly id: Prisma.FieldRef<"quotes", 'Int'>
  readonly quote: Prisma.FieldRef<"quotes", 'String'>
  readonly isPosted: Prisma.FieldRef<"quotes", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"quotes", 'DateTime'>
}
    

// Custom InputTypes
/**
 * quotes findUnique
 */
export type quotesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter, which quotes to fetch.
   */
  where: Prisma.quotesWhereUniqueInput
}

/**
 * quotes findUniqueOrThrow
 */
export type quotesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter, which quotes to fetch.
   */
  where: Prisma.quotesWhereUniqueInput
}

/**
 * quotes findFirst
 */
export type quotesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter, which quotes to fetch.
   */
  where?: Prisma.quotesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of quotes to fetch.
   */
  orderBy?: Prisma.quotesOrderByWithRelationInput | Prisma.quotesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for quotes.
   */
  cursor?: Prisma.quotesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` quotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` quotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of quotes.
   */
  distinct?: Prisma.QuotesScalarFieldEnum | Prisma.QuotesScalarFieldEnum[]
}

/**
 * quotes findFirstOrThrow
 */
export type quotesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter, which quotes to fetch.
   */
  where?: Prisma.quotesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of quotes to fetch.
   */
  orderBy?: Prisma.quotesOrderByWithRelationInput | Prisma.quotesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for quotes.
   */
  cursor?: Prisma.quotesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` quotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` quotes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of quotes.
   */
  distinct?: Prisma.QuotesScalarFieldEnum | Prisma.QuotesScalarFieldEnum[]
}

/**
 * quotes findMany
 */
export type quotesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter, which quotes to fetch.
   */
  where?: Prisma.quotesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of quotes to fetch.
   */
  orderBy?: Prisma.quotesOrderByWithRelationInput | Prisma.quotesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing quotes.
   */
  cursor?: Prisma.quotesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` quotes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` quotes.
   */
  skip?: number
  distinct?: Prisma.QuotesScalarFieldEnum | Prisma.QuotesScalarFieldEnum[]
}

/**
 * quotes create
 */
export type quotesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * The data needed to create a quotes.
   */
  data: Prisma.XOR<Prisma.quotesCreateInput, Prisma.quotesUncheckedCreateInput>
}

/**
 * quotes createMany
 */
export type quotesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many quotes.
   */
  data: Prisma.quotesCreateManyInput | Prisma.quotesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * quotes createManyAndReturn
 */
export type quotesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * The data used to create many quotes.
   */
  data: Prisma.quotesCreateManyInput | Prisma.quotesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * quotes update
 */
export type quotesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * The data needed to update a quotes.
   */
  data: Prisma.XOR<Prisma.quotesUpdateInput, Prisma.quotesUncheckedUpdateInput>
  /**
   * Choose, which quotes to update.
   */
  where: Prisma.quotesWhereUniqueInput
}

/**
 * quotes updateMany
 */
export type quotesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update quotes.
   */
  data: Prisma.XOR<Prisma.quotesUpdateManyMutationInput, Prisma.quotesUncheckedUpdateManyInput>
  /**
   * Filter which quotes to update
   */
  where?: Prisma.quotesWhereInput
  /**
   * Limit how many quotes to update.
   */
  limit?: number
}

/**
 * quotes updateManyAndReturn
 */
export type quotesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * The data used to update quotes.
   */
  data: Prisma.XOR<Prisma.quotesUpdateManyMutationInput, Prisma.quotesUncheckedUpdateManyInput>
  /**
   * Filter which quotes to update
   */
  where?: Prisma.quotesWhereInput
  /**
   * Limit how many quotes to update.
   */
  limit?: number
}

/**
 * quotes upsert
 */
export type quotesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * The filter to search for the quotes to update in case it exists.
   */
  where: Prisma.quotesWhereUniqueInput
  /**
   * In case the quotes found by the `where` argument doesn't exist, create a new quotes with this data.
   */
  create: Prisma.XOR<Prisma.quotesCreateInput, Prisma.quotesUncheckedCreateInput>
  /**
   * In case the quotes was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.quotesUpdateInput, Prisma.quotesUncheckedUpdateInput>
}

/**
 * quotes delete
 */
export type quotesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
  /**
   * Filter which quotes to delete.
   */
  where: Prisma.quotesWhereUniqueInput
}

/**
 * quotes deleteMany
 */
export type quotesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which quotes to delete
   */
  where?: Prisma.quotesWhereInput
  /**
   * Limit how many quotes to delete.
   */
  limit?: number
}

/**
 * quotes without action
 */
export type quotesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the quotes
   */
  select?: Prisma.quotesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the quotes
   */
  omit?: Prisma.quotesOmit<ExtArgs> | null
}
